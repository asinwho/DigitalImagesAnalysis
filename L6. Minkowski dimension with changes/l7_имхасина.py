# -*- coding: utf-8 -*-
"""l7_имхасина.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSjLD74xXBr0Y5ji6DWVWBWjtKlww40W
"""

import numpy as np
import scipy
import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow

def image_show(image, nrows=1, ncols=1):
    fig, ax = plt.subplots(nrows=nrows, ncols=ncols)
    ax.imshow(image, cmap='gray')
    ax.axis('off')
    return fig, ax

def get_vol(u, b):
    k, l = u.shape
    vol=0.0
    for i in range(k):
        for j in range(l):
            vol += u[i][j] - b[i][j]
    return vol

def uS(img):
  k,l=img.shape
  u=np.ndarray(img.shape)
  for i in range(k-1):
    for j in range(l-1):
      u[i][j]=max(img[i][j]+1,max(img[i-1][j],img[i][j-1],img[i+1][j],img[i][j+1]))
  return u

def bS(img):
  k,l=img.shape
  b=np.ndarray(img.shape)
  for i in range(k-1):
    for j in range(l-1):
      b[i][j]=min(img[i][j]-1,min(img[i-1][j],img[i][j-1],img[i+1][j],img[i][j+1]))
  return b



def getA(vol1,vol2,vol3):
  A_2 = (vol2 - vol1) / 2
  A_3 = (vol3 - vol2) / 2
  return (np.log(A_2) - np.log(A_3))

def calculatingDim(img):
    u1 = uS(img)
    u2 = uS(u1)
    u3 = uS(u2)

    b1 = bS(img)
    b2 = bS(b1)
    b3 = bS(b2)

    vol1 = get_vol(u1, b1)
    vol2 = get_vol(u2, b2)
    vol3 = get_vol(u3, b3)

    A_2 = (vol2 - vol1) / 2
    A_3 = (vol3 - vol2) / 2
    dim=2 - getA(vol1,vol2,vol3) / (np.log(2) - np.log(3))

    return dim


#считываем изображение
img = cv2.imread('5.png')
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#смотрим размер ячеек: от 10 до минимального по размерам изображения с шагом мпри/10
s=min(img.shape[0],img.shape[1])
s1=min(10,s//10)+1
sizes = [i for i in range(s1, s, s//10)]

#считаем с изменением размера ячейки разбиения
D = []
for size in sizes:
  D_ = 0
  for i in range(0, img.shape[0], size):
    for j in range(0, img.shape[1], size):
      D_ += get_D(img[i:i + size, j:j + size])
  D.append(D_)

#строим график    
#plt.figure(figsize=(10, 10))
plt.xlabel('размер ячейки')
plt.ylabel('размерность')
l_s = []
l, = plt.plot(sizes, D)
l_s.append(l)
plt.legend(l_s, '5.png')
plt.savefig('rez_5.png')
