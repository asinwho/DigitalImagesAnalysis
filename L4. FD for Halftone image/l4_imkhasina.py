# -*- coding: utf-8 -*-
"""l4_imkhasina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jrO7JhGnwntYKEx4HkGAf8JROfSV9a8q

Задание: Для полутонового изображения вычислить его размерность Минковского методом построения покрывала.
"""

import numpy as np
import scipy
import cv2
from google.colab.patches import cv2_imshow

def fractal_dimension(Z, threshold=0.6):
    def boxCounting(Z, k):
        S = np.add.reduceat(
            np.add.reduceat(Z, np.arange(0, Z.shape[0], k), axis=0),
                               np.arange(0, Z.shape[1], k), axis=1)
        count = 0
        for x in range(S.shape[0]):
            for y in range(S.shape[1]):
                if S[x][y] > 0 & S[x][y] < k * k:
                    count += 1;
        return count
    Z = (Z < threshold)
    p = min(Z.shape)
    n = 2**np.floor(np.log(p)/np.log(2))
    n = int(np.log(n)/np.log(2))
    sizes = 2**np.arange(n, 1, -1)
    counts = []
    for size in sizes:
        counts.append(boxCounting(Z, size))
    leastSquares = np.polyfit(np.log(sizes), np.log(counts), 1)    
    return -leastSquares[0]

#???????????????????????????????????????????????????????????????????????
#для вычисления размерности мы и так в любом случае переводим в оттенки серого/монотонное изображение
#результат не меняется
originalImage = cv2.imread('1.jpg')
grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)
print("фрактальная размерность для оригинала:", fractal_dimension(grayImage))
cv2.imwrite("gs.jpg", grayImage) 
originalImage = cv2.imread('1.png')
grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)
print("фрактальная размерность полутонового: ", fractal_dimension(grayImage))
cv2.imwrite("gs1.jpg", grayImage)